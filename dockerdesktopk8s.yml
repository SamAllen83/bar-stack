#Ingress
#mfe-ingress
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: mfe-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  rules:
  - host: beveragebotbar.com
    http:
      paths:
        #In NGINX, regular expressions follow a first match policy. In order to enable more accurate path matching, ingress-nginx first orders the paths by descending length before writing them to the NGINX template as location blocks.
      - path: /browse(.*)
        backend:
          serviceName: browse-drink-ui
          servicePort: 3001
      - path: /content(.*)
        backend:
          serviceName: content
          servicePort: 5000
      - path: /order(.*)
        backend:
          serviceName: order-drink-ui
          servicePort: 3002
      - path: /(.*)
        backend:
          serviceName: drink-container-ui
          servicePort: 3000
---
#bff-ingress
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: bff-ingress
spec:
  rules:
  - host: beveragebotbar.com
    http:
      paths:
        #In NGINX, regular expressions follow a first match policy. In order to enable more accurate path matching, ingress-nginx first orders the paths by descending length before writing them to the NGINX template as location blocks.
      - path: /browse/api
        backend:
          serviceName: browse-drink-api-gateway
          servicePort: 8081
      - path: /order/api
        backend:
          serviceName: order-drink-api-gateway
          servicePort: 8082
---
#Micro Front Ends (MFEs)
#drink-container-ui
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: drink-container-ui
  name: drink-container-ui
spec:
  selector:
    io.kompose.service: drink-container-ui
  type: NodePort
  ports:
    - port: 3000
      nodePort: 31000
      name: http
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: drink-container-ui
  name: drink-container-ui
spec:
  selector:
    matchLabels:
      io.kompose.service: drink-container-ui
  replicas: 1
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: drink-container-ui
    spec:
      containers:
        - image: drink-container-ui:latest
          imagePullPolicy: IfNotPresent
          name: drink-container-ui
          ports:
            - containerPort: 3000
          resources: {}
      restartPolicy: Always
status: {}
---
#browse-drink-ui
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: browse-drink-ui
  name: browse-drink-ui
spec:
  selector:
    io.kompose.service: browse-drink-ui
  type: NodePort
  ports:
    - port: 3001
      nodePort: 30001
      name: http
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: browse-drink-ui
  name: browse-drink-ui
spec:
  selector:
    matchLabels:
      io.kompose.service: browse-drink-ui
  replicas: 1
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: browse-drink-ui
    spec:
      containers:
        - image: browse-drink-ui:latest
          imagePullPolicy: IfNotPresent
          name: browse-drink-ui
          ports:
            - containerPort: 3001
          resources: {}
      restartPolicy: Always
status: {}
---
#order-drink-ui
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: order-drink-ui
  name: order-drink-ui
spec:
  selector:
    io.kompose.service: order-drink-ui
  type: NodePort
  ports:
    - port: 3002
      nodePort: 30002
      name: http
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: order-drink-ui
  name: order-drink-ui
spec:
  selector:
    matchLabels:
      io.kompose.service: order-drink-ui
  replicas: 1
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: order-drink-ui
    spec:
      containers:
        - image: order-drink-ui:latest
          imagePullPolicy: IfNotPresent
          name: order-drink-ui
          ports:
            - containerPort: 3002
          resources: {}
      restartPolicy: Always
status: {}
---
#content
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: content
  name: content
spec:
  selector:
    io.kompose.service: content
  type: NodePort
  ports:
    - port: 5000
      nodePort: 30500
      name: http
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: content
  name: content
spec:
  selector:
    matchLabels:
      io.kompose.service: content
  replicas: 1
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: content
    spec:
      containers:
        - image: content:latest
          imagePullPolicy: IfNotPresent
          name: content
          ports:
            - containerPort: 5000
          resources: {}
      restartPolicy: Always
status: {}
---
#API Gateways (each micro-front-end [MFE] gets its own backend-for-frontend [BFF] api gateway)
#browse-drink-api-gateway
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: browse-drink-api-gateway
  name: browse-drink-api-gateway
spec:
  selector:
    io.kompose.service: browse-drink-api-gateway
  type: NodePort
  ports:
    - port: 8081
      nodePort: 30081
      name: http
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: browse-drink-api-gateway
  name: browse-drink-api-gateway
spec:
  selector:
    matchLabels:
      io.kompose.service: browse-drink-api-gateway
  replicas: 1
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: browse-drink-api-gateway
    spec:
      containers:
        - env:
            - name: SPRING_PROFILES_ACTIVE
              value: localk8s
            - name: LOGGING_LEVEL_ROOT
              value: INFO
          image: browse-drink-api-gateway:latest
          imagePullPolicy: IfNotPresent
          name: browse-drink-api-gateway
          ports:
            - containerPort: 8081
          resources: {}
      restartPolicy: Always
status: {}
---
#order-drink-api-gateway
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: order-drink-api-gateway
  name: order-drink-api-gateway
spec:
  selector:
    io.kompose.service: order-drink-api-gateway
  type: NodePort
  ports:
    - port: 8082
      nodePort: 30082
      name: http
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: order-drink-api-gateway
  name: order-drink-api-gateway
spec:
  selector:
    matchLabels:
      io.kompose.service: order-drink-api-gateway
  replicas: 1
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: order-drink-api-gateway
    spec:
      containers:
        - env:
            - name: SPRING_PROFILES_ACTIVE
              value: localk8s
            - name: LOGGING_LEVEL_ROOT
              value: INFO
          image: order-drink-api-gateway:latest
          imagePullPolicy: IfNotPresent
          name: order-drink-api-gateway
          ports:
            - containerPort: 8082
          resources: {}
      restartPolicy: Always
status: {}
---
#Microservices
#bartender-api
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: bartender-api
  name: bartender-api
spec:
  selector:
    io.kompose.service: bartender-api
  type: NodePort
  ports:
    - port: 8080
      nodePort: 30080
      name: http
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: bartender-api
  name: bartender-api
spec:
  selector:
    matchLabels:
      io.kompose.service: bartender-api
  replicas: 1
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: bartender-api
    spec:
      containers:
        - env:
            - name: SPRING_PROFILES_ACTIVE
              value: localk8s
          image: bartender-api:latest
          imagePullPolicy: IfNotPresent
          name: bartender-api
          ports:
            - containerPort: 8080
          resources: {}
      restartPolicy: Always
status: {}
---
#Platform Services
#config-server
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: config-server
  name: config-server
spec:
  selector:
    io.kompose.service: config-server
  type: NodePort
  ports:
    - port: 8888
      nodePort: 30888
      name: "config-server-port"
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: config-server
  name: config-server
spec:
  selector:
    matchLabels:
      io.kompose.service: config-server
  replicas: 1
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: config-server
    spec:
      containers:
        - image: config-server:latest
          imagePullPolicy: IfNotPresent
          name: config-server
          ports:
            - containerPort: 8888
          resources: {}
      restartPolicy: Always
status: {}
---
#zookeeper
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: zookeeper
  name: zookeeper
spec:
  selector:
    io.kompose.service: zookeeper
  type: NodePort
  ports:
    - port: 2181
      nodePort: 30181
      name: "zookeeper-port"
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: zookeeper
  name: zookeeper
spec:
  selector:
    matchLabels:
      io.kompose.service: zookeeper
  replicas: 1
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: zookeeper
    spec:
      containers:
        - image: eventuateio/eventuate-zookeeper:0.4.0.RELEASE
          name: zookeeper
          ports:
            - containerPort: 2181
          resources: {}
      restartPolicy: Always
status: {}
---
#kafka
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: kafka
  name: kafka
spec:
  selector:
    io.kompose.service: kafka
  type: NodePort
  ports:
    - port: 9092
      nodePort: 30092
      name: "kafka-port"
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: kafka
  name: kafka
spec:
  selector:
    matchLabels:
      io.kompose.service: kafka
  replicas: 1
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: kafka
    spec:
      containers:
        - env:
            - name: ADVERTISED_HOST_NAME
              value: 172.17.0.1
            - name: KAFKA_HEAP_OPTS
              value: -Xmx320m -Xms320m
            - name: ZOOKEEPER_SERVERS
              value: zookeeper:2181
          image: eventuateio/eventuate-kafka:0.3.0.RELEASE
          name: kafka
          ports:
            - containerPort: 9092
          resources: {}
      restartPolicy: Always
status: {}
---
#mysql
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: mysql
  name: mysql
spec:
  selector:
      io.kompose.service: mysql
  type: NodePort
  ports:
    - port: 3306
      nodePort: 30306
      name: "mysql-port"
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: mysql
  name: mysql
spec:
  selector:
    matchLabels:
      io.kompose.service: mysql
  replicas: 1
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: mysql
    spec:
      containers:
        - env:
            - name: MYSQL_PASSWORD
              value: mysqlpw
            - name: MYSQL_ROOT_PASSWORD
              value: rootpassword
            - name: MYSQL_USER
              value: mysqluser
          image: eventuateio/eventuate-mysql:0.4.0.RELEASE
          name: mysql
          ports:
            - containerPort: 3306
          resources: {}
      restartPolicy: Always
status: {}
---
#cdcservice
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: cdcservice
  name: cdcservice
spec:
  ports:
    - name: "8099"
      port: 8099
      targetPort: 8080
  selector:
    io.kompose.service: cdcservice
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: cdcservice
  name: cdcservice
spec:
  selector:
    matchLabels:
      io.kompose.service: cdcservice
  replicas: 1
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: cdcservice
    spec:
      containers:
        - env:
            - name: EVENTUATELOCAL_CDC_DB_PASSWORD
              value: rootpassword
            - name: EVENTUATELOCAL_CDC_DB_USER_NAME
              value: root
            - name: EVENTUATELOCAL_CDC_MAX_ATTEMPTS_FOR_POLLING
              value: "100"
            - name: EVENTUATELOCAL_CDC_MAX_EVENTS_PER_POLLING
              value: "1000"
            - name: EVENTUATELOCAL_CDC_MYSQL_BINLOG_CLIENT_UNIQUE_ID
              value: "1234567890"
            - name: EVENTUATELOCAL_CDC_OFFSET_STORE_KEY
              value: MySqlBinlog
            - name: EVENTUATELOCAL_CDC_POLLING_INTERVAL_IN_MILLISECONDS
              value: "500"
            - name: EVENTUATELOCAL_CDC_POLLING_RETRY_INTERVAL_IN_MILLISECONDS
              value: "500"
            - name: EVENTUATELOCAL_CDC_READER_NAME
              value: MySqlReader
            - name: EVENTUATELOCAL_CDC_READ_OLD_DEBEZIUM_DB_OFFSET_STORAGE_TOPIC
              value: "false"
            - name: EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS
              value: kafka:9092
            - name: EVENTUATELOCAL_ZOOKEEPER_CONNECTION_STRING
              value: zookeeper:2181
            - name: EVENTUATE_CDC_TYPE
              value: EventuateLocal
            - name: SPRING_DATASOURCE_DRIVER_CLASS_NAME
              value: com.mysql.jdbc.Driver
            - name: SPRING_DATASOURCE_PASSWORD
              value: mysqlpw
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://mysql/eventuate
            - name: SPRING_DATASOURCE_USERNAME
              value: mysqluser
            - name: SPRING_PROFILES_ACTIVE
              value: localk8s
          image: eventuateio/eventuate-cdc-service:0.2.0.RELEASE
          name: cdcservice
          ports:
            - containerPort: 8080
          resources: {}
      restartPolicy: Always
status: {}
